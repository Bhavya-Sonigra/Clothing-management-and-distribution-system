# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package with React Build

on:
  release:
    types: [created]
  # Optional: You might want to add this to test the workflow on pull requests
  # pull_request:
  #   branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    # Set up JDK for Spring Boot backend
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file
        cache: maven
    
    # Set up Node.js for React frontend
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: FRONTEND/package-lock.json
    
    # Install frontend dependencies and build React app
    - name: Build React frontend
      run: |
        # Navigate to React app directory
        cd FRONTEND
        npm ci
        npm run build
        # Copy React build to Spring Boot static resources
        mkdir -p ../BACKEND/src/main/resources/static
        cp -r build/* ../BACKEND/src/main/resources/static/
    
    # Run tests for backend
    - name: Test with Maven
      run: mvn -B test --file BACKEND/pom.xml
    
    # Package the application
    - name: Build with Maven
      run: mvn -B package --file BACKEND/pom.xml -DskipTests
    
    # Update pom.xml with GitHub Packages configuration
    - name: Update pom.xml for GitHub Packages
      run: |
        # Create a backup of the original pom.xml
        cp BACKEND/pom.xml BACKEND/pom.xml.bak
        
        # Use sed to add distributionManagement section if it doesn't exist
        if ! grep -q "<distributionManagement>" BACKEND/pom.xml; then
          sed -i '/<\/properties>/a \
          \    <!-- GitHub Packages Distribution Management --> \
          \    <distributionManagement> \
          \        <repository> \
          \            <id>github</id> \
          \            <name>GitHub Packages</name> \
          \            <url>https://maven.pkg.github.com/${{ github.repository }}</url> \
          \        </repository> \
          \    </distributionManagement>' BACKEND/pom.xml
        fi
    
    # Publish to GitHub Packages
    - name: Publish to GitHub Packages
      run: mvn deploy -s ${{ github.workspace }}/settings.xml -f BACKEND/pom.xml
      env:
        GITHUB_TOKEN: ${{ github.token }}
